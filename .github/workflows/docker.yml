name: Deploy to Docker on EC2

on:
  push:
    branches: ['master']

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build # Ensures deploy runs only after the build job completes successfully

    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Verify Docker is running
            sudo systemctl status docker || sudo systemctl start docker

            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project:latest

            # Stop and remove existing container if it exists
            if [ "$(sudo docker ps -q -f name=nestjs-backend-project)" ]; then
              echo "Stopping and removing existing container..."
              sudo docker stop nestjs-backend-project
              sudo docker rm nestjs-backend-project
            fi

            # Remove old images of the backend project
            echo "Removing old Docker images..."
            old_images=$(sudo docker images ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project -q | tail -n +2)
            if [ -n "$old_images" ]; then
              echo "Removing old images: $old_images"
              sudo docker rmi -f $old_images || true
            else
              echo "No old images found."
            fi

            # Ensure no unused containers hold references to images
            echo "Removing stopped containers..."
            sudo docker container prune -f

            # Free up port if needed
            sudo fuser -k ${{ secrets.APP_PORT }}/tcp || true

            # Run the new Docker container
            echo "Starting new container..."
            sudo docker run -d --name nestjs-backend-project -p ${{ secrets.APP_PORT }}:3000 ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project:latest

            # Verify the container is running
            echo "Verifying the container is running..."
            sudo docker ps -a | grep nestjs-backend-project

            # Log the image ID for reference
            echo "Deployed image ID: $(sudo docker images -q ${{ secrets.DOCKER_USERNAME }}/nestjs-backend-project:latest)"

            # Cleanup dangling images & unused Docker data
            echo "Cleaning up unused Docker data..."
            sudo docker system prune -af
