name: Docker Deployment Rollback

on:
  workflow_dispatch:
    inputs:
      new-version:
        description: 'Version to rollback to (e.g. 1.1.1)'
        required: true
        default: '1.1.1'
      current-version:
        description: 'Current version (e.g. 1.1.3)'
        required: true
        default: '1.1.3'

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Verify Docker is running
            sudo systemctl status docker || sudo systemctl start docker

            # Log in to Docker Hub and confirm login success
            echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            if [ $? -ne 0 ]; then
              echo "Docker login failed"
              exit 1
            fi

            # Check the available Docker images after login
            echo "Listing Docker images on EC2"
            sudo docker images

            # Pull the latest Docker image with the custom tag
            echo "Pulling Docker image: ${{ secrets.DOCKER_USERNAME }}/vdr-services:${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}}"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/vdr-services:${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}}

            # Check if pull was successful
            if [ $? -ne 0 ]; then
              echo "Docker pull failed"
              exit 1
            fi

            # Stop and remove existing container if it exists
            if [ "$(sudo docker ps -q -f name=${{ secrets.SERVICE_NAME }}-${{github.event.inputs.current-version}})" ]; then
              echo "Stopping and removing existing container..."
              sudo docker stop ${{ secrets.SERVICE_NAME }}-${{github.event.inputs.current-version}}
              sudo docker rm ${{ secrets.SERVICE_NAME }}-${{github.event.inputs.current-version}}
            fi

            # Remove old images of the backend project
            echo "Removing old Docker images..."
            old_images=$(sudo docker images ${{ secrets.DOCKER_USERNAME }}/vdr-services:${{ secrets.SERVICE_NAME }}-${{github.event.inputs.current-version}} -q | tail -n +2)
            if [ -n "$old_images" ]; then
              echo "Removing old images: $old_images"
              sudo docker rmi -f $old_images || true
            else
              echo "No old images found."
            fi

            # Ensure no unused containers hold references to images
            echo "Removing stopped containers..."
            sudo docker container prune -f

            # Free up port if needed
            sudo fuser -k ${{ secrets.APP_PORT }}/tcp || true

            # Run the new Docker container with the custom tag
            echo "Starting new container..."
            sudo docker run -d --name ${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}} -p ${{ secrets.APP_PORT }}:3000 ${{ secrets.DOCKER_USERNAME }}/vdr-services:${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}}

            # Verify the container is running
            echo "Verifying the container is running..."
            sudo docker ps -a | grep ${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}}

            # Log the image ID for reference
            echo "Deployed image ID: $(sudo docker images -q ${{ secrets.DOCKER_USERNAME }}/vdr-services:${{ secrets.SERVICE_NAME }}-${{github.event.inputs.new-version}})"

            # Cleanup dangling images & unused Docker data
            echo "Cleaning up unused Docker data..."
            sudo docker system prune -af
